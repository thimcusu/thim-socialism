// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  username String    @unique
  email    String    @unique
  avatar   String?
  name     String?
  surname  String?
  city     String?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  posts    Post[]
  comments Comment[]
  likes    Like[]
  stories  Story[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int
  story     Story?   @relation(fields: [storyId], references: [id])
  storyId   String?
}

model Comment {
  id       Int      @id @default(autoincrement())
  desc     String
  img      String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  likes    Like[]
  Story    Story?   @relation(fields: [storyId], references: [id])
  storyId  String?
}

model Post {
  id       String    @id @default(uuid())
  desc     String
  img      String?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  comments Comment[]
  likes    Like[]
}

model Story {
  id        String    @id @default(uuid())
  desc      String
  img       String?
  createAt  DateTime  @default(now())
  expiresAt DateTime
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]
  likes     Like[]
}
