# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  app:
    image: thim-socialism-dev
    container_name: thim-socialism-dev
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:  
      - ./:/app
      - thim-socialism-dev-node_modules:/app/node_modules
      - thim-socialism-dev-next:/app/.next
    environment:
      - DEBUG=true
      - DEBUG_FROM_ENV=${DEBUG}
    env_file: 
      - ".env.local"
    depends_on:
      thim-socialism-db-dev:
        condition: service_healthy
    networks:
      - internal-dev

  thim-socialism-db-dev:
    image: postgres:15-bullseye
    container_name: thim-socialism-db-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./prisma/pg-data:/var/lib/postgresql/data
    environment:
      - PGDATA=/var/lib/postgresql/data/data-dev
    env_file:
      - ".env.local"
    networks:
      - internal-dev
      - external-host
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 60s
      timeout: 5s
      retries: 3

  adminer-dev:
    image: "adminer:4.8.1-standalone"
    container_name: adminer-dev
    ports:
      - "8080:8080"
    depends_on:
      - thim-socialism-db-dev
    networks:
      - internal-dev
      - external-host
volumes:
  thim-socialism-dev-node_modules:
  thim-socialism-dev-next:
networks:
  internal-dev:
    external: false
  external-host:
    external: true
